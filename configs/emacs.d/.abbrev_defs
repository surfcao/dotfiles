;;-*-coding: utf-8;-*-
(define-abbrev-table 'Rd-mode-abbrev-table
  '(
    ("`ag" "\\arguments" nil :count 0)
    ("`al" "\\alias" nil :count 0)
    ("`au" "\\author" nil :count 0)
    ("`bf" "\\bold" nil :count 0)
    ("`co" "\\code" nil :count 0)
    ("`de" "\\describe" nil :count 0)
    ("`dn" "\\description" nil :count 0)
    ("`dt" "\\details" nil :count 0)
    ("`em" "\\emph" nil :count 0)
    ("`en" "\\enumerate" nil :count 0)
    ("`ex" "\\examples" nil :count 0)
    ("`fi" "\\file" nil :count 0)
    ("`fo" "\\format" nil :count 0)
    ("`it" "\\item" nil :count 0)
    ("`iz" "\\itemize" nil :count 0)
    ("`kw" "\\keyword" nil :count 0)
    ("`li" "\\link" nil :count 0)
    ("`me" "\\method" nil :count 0)
    ("`na" "\\name" nil :count 0)
    ("`no" "\\note" nil :count 0)
    ("`re" "\\references" nil :count 0)
    ("`sa" "\\seealso" nil :count 0)
    ("`se" "\\section" nil :count 0)
    ("`so" "\\source" nil :count 0)
    ("`ss" "\\subsection" nil :count 0)
    ("`sy" "\\synopsis" nil :count 0)
    ("`ta" "\\tabular" nil :count 0)
    ("`ti" "\\title" nil :count 0)
    ("`us" "\\usage" nil :count 0)
    ("`va" "\\value" nil :count 0)
   ))

(define-abbrev-table 'markdown-mode-abbrev-table
  '(
    ("avaiable" "available" nil :count 0)
    ("determinstic" "deterministic" nil :count 0)
    ("distribuion" "distribution" nil :count 0)
    ("explaination" "Explanation" nil :count 0)
    ("expoential" "Exponential" nil :count 0)
    ("exponetial" "exponential" nil :count 0)
    ("meterological" "Meteorological" nil :count 2)
    ("neighors" "neighbors" nil :count 0)
    ("peformance" "performance" nil :count 0)
    ("prameters" "parameters" nil :count 0)
    ("simimilarity" "similarity" nil :count 0)
    ("specical" "Special" nil :count 0)
   ))

(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("accompllished" "accomplished" nil :count 0)
    ("algoriths" "algorithms" nil :count 0)
    ("analsyis" "analysis" nil :count 0)
    ("bacgrkound" "background" nil :count 0)
    ("behaviro" "behavior" nil :count 0)
    ("collaboation" "collaboration" nil :count 0)
    ("collaobraiton" "collaboration" nil :count 0)
    ("communitity's" "community's" nil :count 0)
    ("communitty" "community" nil :count 0)
    ("compoments" "components" nil :count 0)
    ("counsortium" "consortium" nil :count 0)
    ("developement" "development" nil :count 0)
    ("developemtns" "developments" nil :count 0)
    ("effecitvely" "effectively" nil :count 0)
    ("expertises" "expertise's" nil :count 0)
    ("funed" "fined" nil :count 0)
    ("furthur" "further" nil :count 0)
    ("harmanzing" "harmonizing" nil :count 0)
    ("hetergeneous" "heterogeneous" nil :count 0)
    ("inforamtion" "information" nil :count 0)
    ("infrasture" "intrastate" nil :count 0)
    ("interdispliarny" "interdisciplinary" nil :count 0)
    ("longitudeual" "longitudinal" nil :count 0)
    ("partcipation" "participation" nil :count 0)
    ("participartion" "participation" nil :count 0)
    ("particuar" "particular" nil :count 0)
    ("particuarly" "particularly" nil :count 0)
    ("poential" "potential" nil :count 0)
    ("primariliy" "primarily" nil :count 0)
    ("producitivity" "productivity" nil :count 0)
    ("proficint" "proficient" nil :count 0)
    ("questionairs" "questionnaires" nil :count 0)
    ("reproducibility" "reproducible" nil :count 1)
    ("resilence" "resilience" nil :count 0)
    ("resiliience" "resilience" nil :count 0)
    ("resill" "resell" nil :count 0)
    ("resillence" "resilience" nil :count 0)
    ("resillences" "resilience's" nil :count 0)
    ("resillience" "resilience" nil :count 1)
    ("resilliences" "resilience" nil :count 0)
    ("respstive" "respective" nil :count 0)
    ("satellige" "satellite" nil :count 1)
    ("scoeconomic" "socioeconomic" nil :count 0)
    ("secrity" "security" nil :count 0)
    ("seperate" "separate" nil :count 0)
    ("simiarly" "Similarly" nil :count 0)
    ("stabilished" "established" nil :count 0)
    ("statellige" "statelier" nil :count 0)
    ("strenghts" "Strengths" nil :count 0)
    ("torento" "Toronto" nil :count 0)
    ("understgand" "understand" nil :count 0)
   ))

